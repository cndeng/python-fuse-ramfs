#!/usr/bin/env python

# How to mount the File-System:
#   syslogfs mnt
#
# How to umount the File-System?
#   fusermount -u mnt

import os, sys, stat, errno, time
import fuse

# Specify what Fuse API use: 0.2
fuse.fuse_python_api = (0, 2)

# wow, that's a lot of crap just to log
import logging
logger = logging.getLogger('syslogfs')
hdlr = logging.FileHandler('syslogfs.log')
formatter = logging.Formatter('%(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(logging.DEBUG)

class SyslogFS(fuse.Fuse):

  def __init__(self, *args, **kwargs):
    fuse.Fuse.__init__(self, *args, **kwargs)

  # --- Metadata -----------------------------------------------------------
  def getattr(self, path):
    logger.info('gettattr %s' % path)
    st = fuse.Stat()
    st.st_mode = stat.S_IFDIR | 0755
    st.st_nlink = 2
    st.st_atime = int(time.time())
    st.st_mtime = st.st_atime
    st.st_ctime = st.st_atime

    return st

  def chmod(self, path, mode):
    logger.info('chmod %s %s' % (path, mode))
    return

  def chown(self, path, uid, gid):
    logger.info('chown %s' % (path, uid, gid))
    return

  def utime(self, path, times):
    logger.info('utime %s' % (path, times))
    return

  # --- Directories -------------------------------------------------------
  def mkdir(self, path, mode):
    logger.info('mkdir %s %s' % (path, mode))
    return

  def rmdir(self, path):
    logger.info('rmdir %s' % path)
    return

  def readdir(self, path, offset):
    logger.info('readdir %s %s' % (path, offset))
    for item in '.', '..', 'red', 'green':
      yield fuse.Direntry(item)

def main():
  usage="""
syslogfs - Syslog File-System

""" + fuse.Fuse.fusage
  server = SyslogFS(version="%prog " + fuse.__version__,
                    usage=usage,
                    dash_s_do='setsingle')
  
  args = server.parse(errex=1)
  server.main()

if __name__ == '__main__':
  main()
    
      
    