#!/usr/bin/env python

# How to mount the File-System:
#   syslogfs mountpoint
#
# How to umount the File-System?
#   umount mountpoint

import os, sys, stat, errno, time
import fuse

# Specify what Fuse API use: 0.2
fuse.fuse_python_api = (0, 2)

# redirect stdout to a log (unbuffered)
sys.stdout = open('syslogfs.log', 'a', 0)

class Inode(object):

  def __init__(self, mode, uid, gid):
    # Metadata 
    self.atime = time.time()   # time of last acces
    self.mtime = self.atime    # time of last modification
    self.ctime = self.atime    # time of last status change

    self.dev  = 0        # device ID (if special file)
    self.mode = mode     # protection and file-type
    self.uid  = uid      # user ID of owner
    self.gid  = gid      # group ID of owner

    # Extended Attributes
    self.xattr = {}

    # Data 
    if stat.S_ISDIR(mode):
      self.data = set()
    else:
      self.data = ''

  def stat(self):
    stat = fuse.Stat()
    stat.st_mode  = self.mode       # protection bits
    stat.st_ino   = 0               # inode number
    stat.st_dev   = self.dev        # device
    stat.st_nlink = 2               # number of hard links
    stat.st_uid   = self.uid        # user ID of owner
    stat.st_gid   = self.gid        # group ID of owner
    stat.st_size  = len(self.data)  # size of file, in bytes
    stat.st_atime = self.atime      # time of most recent access
    stat.st_mtime = self.mtime      # time of most recent content modification
    stat.st_ctime = self.ctime      # platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows
    return stat

class SyslogFS(fuse.Fuse):

  def __init__(self, *args, **kwargs):
    fuse.Fuse.__init__(self, *args, **kwargs)

  def fsinit(self):
    # background threads need to be initialized here
    # this is where we will spawn our persistence thread
    # 
    # also, this is where we should initialize the fs (ie: create root and hierarchy)
    print 'fsinit'
    return

  # --- Metadata -----------------------------------------------------------
  def getattr(self, path):
    print 'getattr path:%s' % path
    return -errno.ENOSYS

  def chmod(self, path, mode):
    print 'chmod path:%s mode:%s' % (path, mode)
    return -errno.ENOSYS    

  def chown(self, path, uid, gid):
    print 'chown path:%s uid:%s gid:%s' % (path, uid, gid)
    return -errno.ENOSYS

  def utime(self, path, times):
    print 'utime path:%s times:%s' % (path, times)
    return -errno.ENOSYS

  # --- Namespace ----------------------------------------------------------
  def unlink(self, path):
    print 'unlink path:%s' % path
    return -errno.ENOSYS

  def rename(self, oldpath, newpath):
    print 'rename oldpath:%s newpath:%s' % (oldpath, newpath)
    return -errno.ENOSYS

  # --- Links --------------------------------------------------------------
  def symlink(self, path, newpath):
    print 'symlink path:%s newpath:%s' % (path, newpath)
    return -errno.ENOSYS

  def readlink(self, path):
    print 'readlink path:%s' % path
    return -errno.ENOSYS

  # --- Extra Attributes ---------------------------------------------------
  def setxattr(self, path, name, value, flags):
    print 'setxattr path:%s name:%s value:%s flags:%s' % (path, name, value, flags)
    return -errno.ENOSYS

  def getxattr(self, path, name, size):
    print 'getxattr path:%s name:%s size:%s' % (path, name, size)
    return -errno.ENOSYS

  def listxattr(self, path, size):
    print 'listxattr path:%s size:%s' % (path, size)
    return -errno.ENOSYS

  def removexattr(self, path, name):
    print 'removexattr path:%s name:%s' % (path, name)
    return -errno.ENOSYS

  # --- Files --------------------------------------------------------------
  def mknod(self, path, mode, dev):
    print 'mknod path:%s mode:%s dev:%s' % (path, mode, dev)
    return -errno.ENOSYS

  def create(self, path, flags, mode):
    print 'create path:%s flags:%s mode:%s' % (path, flags, mode)
    return -errno.ENOSYS

  def truncate(self, path, len):
    print 'truncate path:%s len:%s' % (path, len)
    return -errno.ENOSYS

  def read(self, path, size, offset):
    print 'truncate path:%s size:%s offset:%s' % (path, size, offset)
    return -errno.ENOSYS

  def write(self, path, buf, offset):
    print 'write path:%s buf:%s offset:%s' % (path, buff, offset)
    return -errno.ENOSYS

  # --- Directories --------------------------------------------------------
  def mkdir(self, path, mode):
    print 'mkdir path:%s mode:%s' % (path, mode)
    return -errno.ENOSYS

  def rmdir(self, path):
    print 'rmdir path:%s' % path
    return -errno.ENOSYS

  def readdir(self, path, offset):
    print 'readdir path:%s offset:%s' % (path, offset)
    return -errno.ENOSYS

def main():
  usage="""
syslogfs - Syslog File-System

""" + fuse.Fuse.fusage
  server = SyslogFS(version="%prog " + fuse.__version__,
                    usage=usage,
                    dash_s_do='setsingle')
  
  args = server.parse(errex=1)
  server.main()

if __name__ == '__main__':
  main()
    
      
    