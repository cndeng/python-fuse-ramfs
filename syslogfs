#!/usr/bin/env python

# How to mount the File-System:
#   syslogfs mnt
#
# How to umount the File-System?
#   fusermount -u mnt

import os, sys, stat, errno, time
import fuse

# Specify what Fuse API use: 0.2
fuse.fuse_python_api = (0, 2)

# redirect stdout to a log
sys.stdout = open('syslogfs.log', 'a')

class SyslogFS(fuse.Fuse):

  def __init__(self, *args, **kwargs):
    fuse.Fuse.__init__(self, *args, **kwargs)

  def fsinit(self):
    # background threads need to be initialized here
    # this is where we will spawn our persistence thread
    print 'fsinit'
    return

  # --- Metadata -----------------------------------------------------------
  def getattr(self, path):
    print 'gettattr %s' % path
    st = fuse.Stat()
    st.st_mode = stat.S_IFDIR | 0755
    st.st_nlink = 2
    st.st_atime = int(time.time())
    st.st_mtime = st.st_atime
    st.st_ctime = st.st_atime

    return st

  def chmod(self, path, mode):
    print 'chmod %s %s' % (path, mode)
    return

  def chown(self, path, uid, gid):
    print 'chown %s' % (path, uid, gid)
    return

  def utime(self, path, times):
    print 'utime %s' % (path, times)
    return

  # --- Directories -------------------------------------------------------
  def mkdir(self, path, mode):
    print 'mkdir %s %s' % (path, mode)
    return

  def rmdir(self, path):
    print 'rmdir %s' % path
    return

  def readdir(self, path, offset):
    if path == '/red':
      time.sleep( 20 )
    print 'readdir %s %s' % (path, offset)
    for item in '.', '..', 'red', 'green':
      yield fuse.Direntry(item)

def main():
  usage="""
syslogfs - Syslog File-System

""" + fuse.Fuse.fusage
  server = SyslogFS(version="%prog " + fuse.__version__,
                    usage=usage,
                    dash_s_do='setsingle')
  
  args = server.parse(errex=1)
  server.main()

if __name__ == '__main__':
  main()
    
      
    